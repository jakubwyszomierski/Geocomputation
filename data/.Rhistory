int.Z <- over(dat.pp,results_sp, fn=mean)
proj4string(results_sp) <- CRS("+init=EPSG:27700")
int.Z <- over(dat.pp,results_sp, fn=mean)
warnings()
thiessen <- SpatialPolygonsDataFrame(dat.pp, int.Z)
tm_shape(thiessen) +  tm_borders(alpha=.5, col = "black") +
tm_shape(results_sp) + tm_dots(col = "blue", scale = 0.5)
tm_shape(thiessen) +  tm_borders(alpha=.5, col = "black") +
tm_shape(results_sp) + tm_dots(col = "blue", scale = 1)
results_sp <- SpatialPointsDataFrame(results[,c("lon", "lat")], results, proj4string = CRS("+init=epsg:4326"))
results_sp <- spTransform(results_sp, CRS("+init=epsg:27700"))
library(spatstat)
library(maptools)
dat.pp <- as(dirichlet(as.ppp(results_sp)), "SpatialPolygons")
dat.pp <- as(dat.pp,"SpatialPolygons")
proj4string(dat.pp) <- CRS("+init=EPSG:27700")
proj4string(results_sp) <- CRS("+init=EPSG:27700")
int.Z <- over(dat.pp,results_sp, fn=mean)
thiessen <- SpatialPolygonsDataFrame(dat.pp, int.Z)
tm_shape(thiessen) +  tm_borders(alpha=.5, col = "black") +
tm_shape(results_sp) + tm_dots(col = "blue", scale = 1)
UK <- map_data("world") %>% filter(region=="UK")
UK
plot(UK)
tmap_mode("view")
tm_shape(thiessen) +  tm_borders(alpha=.5, col = "black") +
tm_shape(results_sp) + tm_dots(col = "blue", scale = 1)
#Set working directory to Geocomputation_Coursework
setwd("~/Desktop/Gdata")
#Set working directory to Geocomputation_Coursework
setwd("~/Desktop/data")
#Install all necessary libraries
install.packages("spData")
install.packages("tidyverse")
install.packages("spData")
#Load all necessary libraries
library("rgdal") #Provides bindings to the 'Geospatial' Data Abstraction Library ('GDAL') & access to projection/transformation operations from the 'PROJ.4' library.
library("rgeos") #Implements functionality for the manipulation and querying of spatial geometries using the Geometry Engine
library("sf") #Simple Features. This is the map maker
library("spData") #Diverse spatial datasets for demonstrating, benchmarking and teaching spatial data analysis
library("tmap") #Create theamatic maps
library("leaflet") #Create & customise interactive maps
library("tidyverse") #Collection of packages in the tidyverse (see https://www.tidyverse.org/)
library("readxl")  #Package to read excel files
library("viridis") #Nicer colors
library("ggthemes") #Nice theme for maps
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR("./Camden_Shapefile/Camden_Ward_Boundaries", "Camden")
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR(".", "Camden")
#Plot the Camden shapefile
plot(Output.Areas, main="Camden Ward Boundaries")
#Load the data detailing access to public open space and nature by ward
Access_to_public_open_space_and_nature_by_ward <-read.csv("public-open-space-nature-ward_access-to-nature.csv")
View(Access_to_public_open_space_and_nature_by_ward)
#Delete boroughs in Access_to_public_open_space_and_nature_by_ward dataset except for Camden. Delete rows 1-102 and 121-249
Access_to_public_open_space_and_nature_by_ward <- Access_to_public_open_space_and_nature_by_ward[c(103:120), ]
#Change name of coloumn relating to Ward Names in the Output.Areas dataset in preperation of merging the dataset with Access_to_public_open_space_and_nature_by_ward
names(Output.Areas)[2]<- "Ward.name"
#Changing the column name for clarity
names(Percentage_of_Camden_homes_with_good_access_to_nature)[2]<- "Percentage_of_homes_with_good_access_to_nature"
#Merge Output.Areas and Access_to_public_open_space_and_nature_by_ward datasets by Ward.name
Percentage_of_Camden_homes_with_good_access_to_nature <- merge(Output.Areas, Access_to_public_open_space_and_nature_by_ward, by="Ward.name")
Percentage_of_Camden_homes_with_good_access_to_nature
head(Percentage_of_Camden_homes_with_good_access_to_nature)
head(Percentage_of_Camden_homes_with_good_access_to_nature@data)
names(Percentage_of_Camden_homes_with_good_access_to_nature)[2]
Access_to_public_open_space_and_nature_by_ward
names(Access_to_public_open_space_and_nature_by_ward)[2]
names(Access_to_public_open_space_and_nature_by_ward)
#Changing the column name for clarity
names(Access_to_public_open_space_and_nature_by_ward)[7]<- "Percentage_of_homes_with_good_access_to_nature"
#Merge Output.Areas and Access_to_public_open_space_and_nature_by_ward datasets by Ward.name
Percentage_of_Camden_homes_with_good_access_to_nature <- merge(Output.Areas, Access_to_public_open_space_and_nature_by_ward, by="Ward.name")
head(Percentage_of_Camden_homes_with_good_access_to_nature@data)
#Load the data detailing access to public open space and nature by ward
Access_to_public_open_space_and_nature_by_ward <-read.csv("public-open-space-nature-ward_access-to-nature.csv")
head(Access_to_public_open_space_and_nature_by_ward)
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR("./Camden_Shapefile/Camden_Ward_Boundaries", "Camden")
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR(".", "Camden")
#Plot the Camden shapefile
plot(Output.Areas, main="Camden Ward Boundaries")
#Load the data detailing access to public open space and nature by ward
Access_to_public_open_space_and_nature_by_ward <-read.csv("public-open-space-nature-ward_access-to-nature.csv")
head(Access_to_public_open_space_and_nature_by_ward)
#Delete boroughs in Access_to_public_open_space_and_nature_by_ward dataset except for Camden. Delete rows 1-102 and 121-249
Access_to_public_open_space_and_nature_by_ward <- Access_to_public_open_space_and_nature_by_ward[c(103:120), ]
#Change name of coloumn relating to Ward Names in the Output.Areas dataset in preperation of merging the dataset with Access_to_public_open_space_and_nature_by_ward
names(Output.Areas)[2]<- "Ward.name"
#Changing the column name for clarity
names(Percentage_of_Camden_homes_with_good_access_to_nature)[2]<- "Percentage_of_homes_with_good_access_to_nature"
#Merge Output.Areas and Access_to_public_open_space_and_nature_by_ward datasets by Ward.name
Percentage_of_Camden_homes_with_good_access_to_nature <- merge(Output.Areas, Access_to_public_open_space_and_nature_by_ward, by="Ward.name")
#setting the coordinate system to the British National Grid
proj4string(Percentage_of_Camden_homes_with_good_access_to_nature) <- CRS("+init=EPSG:27700")
#deleting the unnecesary columns in the main dataset
Percentage_of_Camden_homes_with_good_access_to_nature <- Percentage_of_Camden_homes_with_good_access_to_nature[, c(1,7,8)]
#Changing the column name for clarity
names(Percentage_of_Camden_homes_with_good_access_to_nature)[3] <- "Percentage_of_homes_with_deficiency_in_access_to_nature"
qtm(Percentage_of_Camden_homes_with_good_access_to_nature, fill="Percentage_of_homes_with_good_access_to_nature")
#Changing the column name for clarity
names(Percentage_of_Camden_homes_with_good_access_to_nature)[3] <- "Percentage_of_homes_with_deficiency_in_access_to_nature"
head(Percentage_of_Camden_homes_with_good_access_to_nature@data)
class(Percentage_of_Camden_homes_with_good_access_to_nature@data$Percentage_of_homes_with_deficiency_in_access_to_nature)
qtm(Percentage_of_Camden_homes_with_good_access_to_nature, fill="Percentage_of_homes_with_good_access_to_nature")
qtm(Percentage_of_Camden_homes_with_good_access_to_nature, col="Percentage_of_homes_with_good_access_to_nature")
qtm(greenwards,fill = "Percentage_of_homes_with_good_access_to_nature",border="gray")
qtm(Percentage_of_Camden_homes_with_good_access_to_nature,fill = "Percentage_of_homes_with_good_access_to_nature",border="gray")
summary(Percentage_of_Camden_homes_with_good_access_to_nature)
View(Percentage_of_Camden_homes_with_good_access_to_nature)
View(Percentage_of_Camden_homes_with_good_access_to_nature@data)
tm_shape(Percentage_of_Camden_homes_with_good_access_to_nature) + tm_borders()
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR(".", "Camden")
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR(".", "Camden")
#Load our dataset - the output area shapefiles
Output.Areas <- readOGR("Camden.shp")
?readOGR()
#Load our dataset - the output area shapefiles
Output.Areas <- rgdal::readOGR("Camden.shp")
Camden <-  readOGR("c/geo_export_dbfedc6c-4553-4078-9f12-3e54f1552a71.shp")
Camden <-  readOGR("../c/geo_export_dbfedc6c-4553-4078-9f12-3e54f1552a71.shp")
Camden <-  readOGR("../c/geo_export_dbfedc6c-4553-4078-9f12-3e54f1552a71.shp", require_geomType = "wkbPolygon")
Camden <-  readOGR("../c/geo_export_dbfedc6c-4553-4078-9f12-3e54f1552a71.shp", require_geomType = "wkbPolygon")
#Load our dataset - the output area shapefiles
Output.Areas <- rgdal::readOGR("../London_Ward/London_Ward.shp")
#Load our dataset - the output area shapefiles
Output.Areas <- rgdal::readOGR("../London-wards-2018/London-wards-2018_ESRI/London_Ward.shp")
#Load our dataset - the output area shapefiles
Output.Areas <- rgdal::readOGR("../London-wards-2018/London-wards-2018_ESRI/London_Ward.shp")
#Load our dataset - the output area shapefiles
Output.Areas <- rgdal::readOGR("../London-wards-2018/London-wards-2018_ESRI/London_Ward.shp")
head(Output.Areas)
head(Output.Areas@data)
#Load our dataset - the output area shapefiles
my_shapefile <- rgdal::readOGR("../London-wards-2018/London-wards-2018_ESRI/London_Ward.shp")
head(my_shapefile@data)
my_shapefile <- my_shapefile[,my_shapefile@data$DISTRICT=="Camden"]
my_shapefile <- my_shapefile[my_shapefile@data$DISTRICT=="Camden",]
my_shapefile
plot(my_shapefile)
my_shapefile <- my_shapefile[my_shapefile@data$DISTRICT="Camden",]
#importing libraries
library(spatstat)
library(sp)
library(rgeos)
library(rgdal)
library(maptools)
#Creating map 1: Types of green space
setwd("~/Desktop")
greenspaces<-read_csv(".", "types_of_open_space")
#Creating map 2: Children Obesity in London
library("spdep")
library("rgeos")
library("rgdal")
library("sf")
library("spData")
setwd("~/Desktop")
Variablesdata<-read.csv("variablesnew.csv")
London_Ward<-readOGR("London_Ward","London_Ward")
London_Ward<-readOGR("London_Ward","London_Ward")
London_Ward <- spTransform(London_Ward, CRS("+init=EPSG:27700"))
summary(Variablesdata)
summary(London_Ward)
Variables_Wards<-merge(London_Ward,Variablesdata,by.x="GSS_CODE",by.y="ward_code")
qtm(Variables_Wards,fill = "obesity_p", border="gray")
qtm(Variables_Wards, fill="obesity_p", border="gray",
fill.style="quantile",fill.palette="Blues",title = "Childhood Obesity in London Wards",
fill.title= "% Obese", title.position = c(.025,0.95), scale = .8) +
tm_legend(position=c("left","bottom"),title.size = 1.4,scale=.8, frame = FALSE)+
tm_scale_bar(position = c("RIGHT", "BOTTOM"),size =.3)+
tm_compass(position = c("right","top"),text.size = 0.8)
sp1<-Variables_Wards[!(is.na(Variables_Wards$ward_name) | is.na(Variables_Wards$obesity_p) |
is.na(Variables_Wards$unemployment_p) |
is.na(Variables_Wards$green_p)),]
neighbours<-poly2nb(sp1)
plot(sp1)
plot(neighbours, coordinates(sp1), add=T, col="red")
#Generate weighted set of links for autocorrelation analysis
listw<-nb2listw(neighbours,style = "W",zero.policy = T)
moran.test(sp1$obesity_p,listw = listw, na.action = na.omit)
moran.plot(sp1$obesity_p, listw = listw)
neigh <- poly2nb(Variables_Wards)
listw2 <- nb2listw(neigh)
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.pass())
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = aa.exclude)
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.exclude)
moran.map <- Variables_Wards
moran.map@data <- cbind(Variables_Wards@data, local)
tm_shape(moran.map) + tm_fill(col="Ii", style="quantile", title="local moran statistic")
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.omit)
localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.omit)
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.pass)
moran.map <- Variables_Wards
moran.map@data <- cbind(Variables_Wards@data, local)
tm_shape(moran.map) + tm_fill(col="Ii", style="quantile", title="local moran statistic")
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.omit)
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.pass)
local <- localmoran(x=Variables_Wards$obesity_p,zero.policy = T,
listw=nb2listw(neigh,style = "C", zero.policy = T),
na.action = na.exclude)
?localmoran
url <- "https://www.worldometers.info/coronavirus/?fbclid=IwAR3IDKlTxsgMlxRN8Lvs0XOrptxyWPm6Ec90cqV2ziAQybmweraJ5E4gmZQ"
webpage <- read_html(url)
library(stringr)
library(rvest)
library(dplyr)
library(tidyr)
library(stringi)
#all players
url <- "https://www.worldometers.info/coronavirus/?fbclid=IwAR3IDKlTxsgMlxRN8Lvs0XOrptxyWPm6Ec90cqV2ziAQybmweraJ5E4gmZQ"
webpage <- read_html(url)
players <- webpage %>%
html_nodes(css = ".hauptlink") %>%
html_text()
df <- data.frame(players)
head(df)
players <- webpage %>%
html_nodes(css = "tbody") %>%
html_text()
players <- webpage %>%
html_nodes(css = "tbody") %>%
html_text()
players
df <- data.frame(players)
head(df)
View(df)
df
?tm_bubbles()
?tmap::tm_bubbles()
ptal <- read.csv("~/Desktop/LOAC_data/transport/PTAL_100m_grid_2015/PTAL_grid.csv")
head(p)
head(ptal)
p <- sp::SpatialGridDataFrame(ptal[,2:3], ptal, CRS("+init=epsg:27700"))
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal, CRS("+init=epsg:27700"))
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal, sp::CRS("+init=epsg:27700"))
clasS(ptal$X)
class(ptal$X)
p <- sp::SpatialPointsDataFrame(ptal[,c(as.numeric("X"), as.numeric("Y"))], ptal, sp::CRS("+init=epsg:27700"))
ptal$X <- as.numeric(ptal$X)
ptal$Y <- as.numeric(ptal$Y)
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal, sp::CRS("+init=epsg:27700"))
ptal[,2:3]
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal)
library(sp)
proj4string(sp)
proj4string(p)
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal, CRS("+init=epsg:27700"))
p <- sp::SpatialPointsDataFrame(ptal[,2:3], ptal, proj4string=CRS("+init=epsg:27700"))
plot(p)
library(tmap)
tmap_mode("view")
head(p)
tm_shape(p) + tm_dots("PTAL2015")
library(osmdata)
library(osm)
install.packages(osmdata)
library(osmdata)
??getbb
library(osmdata)
library(rgdal)
library(tmap)
library(ggplot2)
library(osmdata)
install.packages("osmdata")
library(raster)
dfr <- rasterFromXYZ(ptal[,c(2:3,5)])
warnings()
plot(dfr)
install.packages(c("adehabitatHR", "dismo", "fpc", "GISTools", "spgwr"))
setwd("~/Desktop/studia/2nd_year/GEOG2025/assessment/WCYH4/data")
#load packages
library(sp)
library(rgdal)
library(ggplot2)
library(tmap)
library(gdata)
library(raster)
library(adehabitatHR)
library(tmaptools)
library(psych)
library(RColorBrewer)
library(spdep)
library(GISTools)
library(spgwr)
library(fpc)
library(gridExtra)
library(grid)
library(gtable)
library(spatstat)
library(dismo)
#load datasets
#binding datasets from June to December, 2016
stop_and_search1 <- read.csv("stop_and_search/2016-06/2016-06-metropolitan-stop-and-search.csv")
stop_and_search2 <- read.csv("stop_and_search/2016-07/2016-07-metropolitan-stop-and-search.csv")
stop_and_search3 <- read.csv("stop_and_search/2016-08/2016-08-metropolitan-stop-and-search.csv")
stop_and_search4 <- read.csv("stop_and_search/2016-09/2016-09-metropolitan-stop-and-search.csv")
stop_and_search5 <- read.csv("stop_and_search/2016-10/2016-10-metropolitan-stop-and-search.csv")
stop_and_search6 <- read.csv("stop_and_search/2016-11/2016-11-metropolitan-stop-and-search.csv")
stop_and_search7 <- read.csv("stop_and_search/2016-12/2016-12-metropolitan-stop-and-search.csv")
stop_and_search <- rbind(stop_and_search1, stop_and_search2, stop_and_search3,
stop_and_search4, stop_and_search5, stop_and_search6,
stop_and_search7)
d.index <- read.xls("ID_2015_for_London.xls", sheet=2)
drug.misuse.deaths <- read.xls("localauthoritiesregistrations201416final.xls", sheet=3, header=TRUE)
drug.misuse <- read.xls("drug-misuse-borough.xls", sheet=6)
census.data1 <- read.xls("lsoa-data_2011.xls", sheet=1)
census.data2 <- read.xls("lsoa-data_2011.xls", sheet=2)
#merging census data
census.data <- merge(census.data1, census.data2, by="Codes")
crime <- read.csv("LSOA_Crime.csv")
#load shapefiles and set coordinates system
boroughs.map <- readOGR("statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp")
projection(boroughs.map) <- CRS("+init=epsg:27700")
Tower.Hamlets <- readOGR("TowerHamlets/shapefiles/Tower_Hamlets_lsoa11.shp")
projection(Tower.Hamlets) <- CRS("+init=epsg:27700")
library(sp)
library(rgdal)
library(ggplot2)
library(tmap)
library(gdata)
library(raster)
library(adehabitatHR)
library(tmaptools)
library(psych)
library(RColorBrewer)
library(spdep)
library(GISTools)
library(spgwr)
library(fpc)
library(gridExtra)
library(grid)
library(gtable)
library(spatstat)
library(dismo)
#load datasets
#binding datasets from June to December, 2016
stop_and_search1 <- read.csv("stop_and_search/2016-06/2016-06-metropolitan-stop-and-search.csv")
stop_and_search2 <- read.csv("stop_and_search/2016-07/2016-07-metropolitan-stop-and-search.csv")
stop_and_search3 <- read.csv("stop_and_search/2016-08/2016-08-metropolitan-stop-and-search.csv")
stop_and_search4 <- read.csv("stop_and_search/2016-09/2016-09-metropolitan-stop-and-search.csv")
stop_and_search5 <- read.csv("stop_and_search/2016-10/2016-10-metropolitan-stop-and-search.csv")
stop_and_search6 <- read.csv("stop_and_search/2016-11/2016-11-metropolitan-stop-and-search.csv")
stop_and_search7 <- read.csv("stop_and_search/2016-12/2016-12-metropolitan-stop-and-search.csv")
stop_and_search <- rbind(stop_and_search1, stop_and_search2, stop_and_search3,
stop_and_search4, stop_and_search5, stop_and_search6,
stop_and_search7)
d.index <- read.xls("ID_2015_for_London.xls", sheet=2)
drug.misuse.deaths <- read.xls("localauthoritiesregistrations201416final.xls", sheet=3, header=TRUE)
drug.misuse <- read.xls("drug-misuse-borough.xls", sheet=6)
census.data1 <- read.xls("lsoa-data_2011.xls", sheet=1)
census.data2 <- read.xls("lsoa-data_2011.xls", sheet=2)
#merging census data
census.data <- merge(census.data1, census.data2, by="Codes")
crime <- read.csv("LSOA_Crime.csv")
#load shapefiles and set coordinates system
boroughs.map <- readOGR("statistical-gis-boundaries-london/ESRI/London_Borough_Excluding_MHW.shp")
projection(boroughs.map) <- CRS("+init=epsg:27700")
Tower.Hamlets <- readOGR("TowerHamlets/shapefiles/Tower_Hamlets_lsoa11.shp")
projection(Tower.Hamlets) <- CRS("+init=epsg:27700")
drug.misuse.deaths <- drug.misuse.deaths[1:394,]
drug.misuse.deaths[drug.misuse.deaths==":"] <- NA
drug.misuse.deaths$Rate <- as.numeric(drug.misuse.deaths$Rate)
drug.misuse.deaths$Deaths <- as.numeric(drug.misuse.deaths$Deaths)
summary(drug.misuse.deaths)
names(boroughs.map)
names(drug.misuse.deaths)
boroughs.drug.misuse.deaths <- merge(boroughs.map, drug.misuse.deaths, by.x="GSS_CODE", by.y="Area.Code")
#map of rate of deaths related to drug misuse in London
tm_shape(boroughs.drug.misuse.deaths) +
tm_fill("Rate", style="pretty",n=5, palette="Greys",title="Death rate", colorNA="White")+
tm_borders(col="black", alpha = 0.6, lwd=1.4) +
tm_compass(size = 10, type="8star", position = c("right", "bottom")) +
tm_layout(legend.text.size = 1.2, legend.title.size= 1.9,
legend.position=c("left", "bottom"), frame = FALSE,
title="Drug misuse deaths in London",
title.size = 1.7)
#function with table of the 5 observations with the highest rate, ordered by the second variable (rate)
my.table <- function(data, variable1, variable2, font_size, colname1, colname2){
df <- data.frame(data@data[,variable1], data@data[,variable2])
df <- df[order(-data@data[,variable2]),]
death.rates <- head(df, n=5)
death.rates.g <- tableGrob(death.rates, rows = NULL, cols=c(colname1, colname2),theme = ttheme_default(base_size = font_size))
death.rates.g <- gtable_add_grob(death.rates.g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 2, b = nrow(death.rates.g),
l = 1, r = ncol(death.rates.g))
death.rates.g <- gtable_add_grob(death.rates.g,grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)), t = 1, l = 1, r = ncol(death.rates.g))
grid.draw(death.rates.g)
}
my.table(boroughs.drug.misuse.deaths, "Borough", "Rate", 20 , "Borough", "Drug misuse death rate")
grid.newpage()
#drug misuse
#Estimated crude rate of opiate and/or crack cocaine users, per 1,000 aged 15-64
summary(drug.misuse)
names(drug.misuse)
names(drug.misuse) <- c("Code", "Authority", "Number of drug users", "Population", "Rate", "Lower_95_CI","Upper_95_CI")
drug.misuse$Rate <- as.numeric(drug.misuse$Rate)
boroughs.drug.misuse <- merge(boroughs.map, drug.misuse, by.x="GSS_CODE", by.y="Code")
#map of drug misuse in London
tm_shape(boroughs.drug.misuse) +
tm_fill("Rate", n=8, palette="BuPu",title="Rate of drug users")+
tm_borders(col="grey30", alpha = 0.6, lwd=1.4) +
tm_compass(size = 10, type="8star", position = c("right", "bottom")) +
tm_layout(legend.text.size = 1.2, legend.title.size= 1.9,
legend.position=c("left", "bottom"), frame = FALSE,
title.size = 1.75, title = "Drug users in London")
#table of 5 boroughs with the highesr rates
my.table(boroughs.drug.misuse, "Authority", "Rate", 20, "Borough", "Drug misuse rate")
grid.newpage()
#stop and search
stop_and_search <-subset(stop_and_search, select=c("Type", "Date",
"Longitude","Latitude", "Gender", "Age.range",
"Officer.defined.ethnicity",
"Legislation", "Object.of.search",
"Outcome"))
stop_and_search <- subset(stop_and_search,
Legislation=="Misuse of Drugs Act 1971 (section 23)")
#excluding those without coordinates
stop_and_search[stop_and_search==''] <- NA
stop_and_search.c <-subset(stop_and_search, Latitude!="NA")
stop_and_search.c <-subset(stop_and_search.c, Longitude!="NA")
summary(stop_and_search.c)
#creating SpatialPointsDataFrame
summary(data.frame(as.factor(stop_and_search.c$Longitude), as.factor(stop_and_search.c$Latitude)))
stop_and_search.sp <-SpatialPointsDataFrame(stop_and_search.c[,3:4],
stop_and_search.c, proj4string = CRS("+init=EPSG:4326"))
stop_and_search.sp <- spTransform(stop_and_search.sp, CRS("+init=epsg:27700"))
#subseting points to observations only within Tower Hamlets borough
stop_and_search.sp.T <- stop_and_search.sp[Tower.Hamlets,]
summary(stop_and_search.sp.T)
plot(stop_and_search.sp.T)
plot(stop_and_search.sp.T)
plot(stop_and_search.sp.T)
#function which creates a map of Kernel Density Estimatation for a chosen SpatialPointsDataFrame object
KDE <- function(SPDF, map,point.size, range1, range2, range3, range4, color, title, grid){
kde <- kernelUD(SPDF, h="href", grid = grid)
tm_shape(map) +
tm_fill(col = "#f0f0f0") + tm_borders(alpha=.8, col = color)+
tm_shape(SPDF) + tm_dots(col = "black", size=point.size) + tm_shape(getverticeshr(kde, percent = range1)) +
tm_borders(alpha=.6, col = "tomato1", lwd = 2) + tm_fill(alpha=.1, col = "tomato1") +
tm_shape(getverticeshr(kde, percent = range2)) + tm_borders(alpha=.65, col = "tomato2", lwd = 2) +
tm_fill(alpha=.15, col = "tomato2") + tm_shape(getverticeshr(kde, percent = range3)) +
tm_borders(alpha=.7, col = "tomato3", lwd = 2) +
tm_fill(alpha=.2, col = "tomato3") + tm_shape(getverticeshr(kde, percent = range4)) +
tm_borders(alpha=.75, col = "tomato4", lwd = 2) +
tm_fill(alpha=.25, col = "tomato4") + tm_scale_bar(position="left", size=0.6)+
tm_layout(frame=FALSE, title = title, title.size = 1.3) +
tm_compass(size = 7, type="8star", position = c("right", "bottom"))
}
#map of KDE at the city level
KDE(stop_and_search.sp, boroughs.map, 0.02, 75, 50, 25, 5, "royalblue1",
"Kernel Density Estimation for London", 1000)
kde <- kernelUD(stop_and_search.sp.T, h="href", grid = 2000)
#ranges for Kernel density estimates
range75 <- getverticeshr(kde, percent = 75)
range50 <- getverticeshr(kde, percent = 50)
range25 <- getverticeshr(kde, percent = 25)
range5 <- getverticeshr(kde, percent = 5)
#KDE for Tower
KDE.for.Tower <-  tm_shape(stop_and_search.sp.T) + tm_dots(col = "black", size=0.125) +tm_shape(range75) +
tm_borders(alpha=.6, col = "tomato1", lwd = 2) + tm_fill(alpha=.1, col = "tomato1") +
tm_shape(range50) + tm_borders(alpha=.65, col = "tomato2", lwd = 2) +
tm_fill(alpha=.15, col = "tomato2") + tm_shape(range25) +
tm_borders(alpha=.7, col = "tomato3", lwd = 2) +
tm_fill(alpha=.2, col = "tomato3") + tm_shape(range5) +
tm_borders(alpha=.75, col = "tomato4", lwd = 2) +
tm_fill(alpha=.25, col = "tomato4") + tm_scale_bar(position="left", size=0.6)
KDE.for.Tower
KDE.for.Tower + tm_add_legend()
?tm_add_legend
KDE.for.Tower + tm_add_legend(type = "line", col = "dodgerblue3", labels = "Rivers", title = "Europe River Map") +
tm_add_legend(type = "line", col = "red", labels = "Rivers2 ")
KDE.for.Tower + tm_add_legend(type = "line", col = "blue", labels = "one", title = "title") +
tm_add_legend(type = "line", col = "red", labels = "two ")+
tm_add_legend(type = "line", col = "yellow", labels = "three ")+
tm_add_legend(type = "line", col = "green", labels = "four ")
KDE.for.Tower + tm_add_legend(type = "line", col = "blue", labels = "one", title = "title") +
tm_add_legend(type = "line", col = "red", labels = "two ")+
tm_add_legend(type = "fill", col = "yellow", labels = "three ")+
tm_add_legend(type = "line", col = "green", labels = "four ")
KDE.for.Tower + tm_add_legend(type = "line", col = "blue", labels = "one", title = "title") +
tm_add_legend(type = "line", col = "red", labels = "two ")+
tm_add_legend(type = "fill", col = "yellow", labels = "three ")+
tm_add_legend(type = "symbol", col = "green", labels = "four ")
KDE.for.Tower + tm_add_legend(type = "line", col = "blue", labels = "one", title = "TITLE") +
tm_add_legend(type = "line", col = "red", labels = "two ")+
tm_add_legend(type = "fill", col = "yellow", labels = "three ")+
tm_add_legend(type = "symbol", col = "green", labels = "four ")
westminster_shapes<-readOGR("~/Desktop", "E09000033_Westminster")
westminster_shapes <- spTransform(westminster_shapes, CRS("+init=EPSG:27700"))
plot(westminster_shapes)
westminster_shapes<-readOGR("~/Desktop/olivia", "E09000033_Westminster")
westminster_shapes <- spTransform(westminster_shapes, CRS("+init=EPSG:27700"))
westminster_shapes
